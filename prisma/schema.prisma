datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Owner
  Manager
  Cashier
  Worker
}

enum PaymentType {
  Salaried
  Hourly
}

enum PurchaseReturnStatus {
  pending
  approved
  completed
  rejected
}

enum InvoiceStatus {
  OPEN
  PARTIALLY_PAID
  PAID
  CANCELED
}

enum PurchaseReturnReason {
  expired
  other
}

// USER-RELATED MODELS
model User {
  id          Int      @id @default(autoincrement())
  name        String
  password    String
  email       String   @unique
  phoneNumber String
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  employee                  Employee?
  missingProducts           MissingProduct[]
  saleInvoices              SaleInvoice[]
  purchaseInvoices          PurchaseInvoice[]
  purchasePayments          PurchasePayment[]
  salePayments              SalePayment[]
  saleReturns               SaleReturn[]
  purchaseReturnsReturnedBy PurchaseReturn[]  @relation("PurchaseReturn_returnedBy")
  purchaseReturnsMoneyTaken PurchaseReturn[]  @relation("PurchaseReturn_moneyTakenBy")

  @@index([email])
}

model Employee {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  paymentType PaymentType
  hourlyPay   Decimal?    @db.Decimal(18, 2)
  monthlyPay  Decimal?    @db.Decimal(18, 2)
  dateOfHire  DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  employeeTimeShift EmployeeTimeShift[]
  employeeExpense   EmployeeExpense[]

  @@index([userId], map: "idx_employee_userId_unique")
}

model EmployeeTimeShift {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  workDate      DateTime
  startWorkTime DateTime
  endWorkTime   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([workDate])
}

model EmployeeExpense {
  id           Int         @id @default(autoincrement())
  employeeId   Int
  paymentType  PaymentType
  paymentMonth DateTime
  totalHours   Decimal?    @db.Decimal(18, 2)
  hourlyPaid   Decimal?    @db.Decimal(18, 2)
  totalPaid    Decimal     @db.Decimal(18, 2)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([paymentMonth])
}

// PRODUCT-RELATED MODELS
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@index([name])
}

model Unit {
  id         Int      @id @default(autoincrement())
  unitName   String
  unitSymbol String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  products              Product[]              @relation("BaseUnitRelation")
  productUnits          ProductUnit[]
  conversionsFrom       UnitConversion[]       @relation("FromUnit")
  conversionsTo         UnitConversion[]       @relation("ToUnit")
  productSalePrices     ProductSalePrice[]
  productPurchasePrices ProductPurchasePrice[]

  @@index([unitSymbol])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  categoryId  Int
  baseUnitId  Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  baseUnit Unit     @relation("BaseUnitRelation", fields: [baseUnitId], references: [id])

  productUnits          ProductUnit[]
  productSalePrices     ProductSalePrice[]
  productPurchasePrices ProductPurchasePrice[]
  inventory             Inventory?

  @@index([categoryId])
  @@index([baseUnitId])
  @@index([name])
}

model ProductUnit {
  productId Int
  unitId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  unit    Unit    @relation(fields: [unitId], references: [id])

  @@id([productId, unitId])
}

model UnitConversion {
  id             Int      @id @default(autoincrement())
  fromUnitId     Int
  toUnitId       Int
  conversionRate Decimal  @db.Decimal(18, 6)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  fromUnit Unit @relation("FromUnit", fields: [fromUnitId], references: [id])
  toUnit   Unit @relation("ToUnit", fields: [toUnitId], references: [id])

  @@unique([fromUnitId, toUnitId], name: "from_to_unique")
}

model Inventory {
  id        Int      @id @default(autoincrement())
  productId Int      @unique()
  quantity  Decimal  @db.Decimal(18, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

model MissingProduct {
  id                     Int      @id @default(autoincrement())
  productPurchasePriceId Int
  quantity               Decimal  @db.Decimal(18, 2)
  processedBy            Int
  notes                  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  productPurchasePrice ProductPurchasePrice @relation(fields: [productPurchasePriceId], references: [id])
  user                 User                 @relation(fields: [processedBy], references: [id])

  @@index([productPurchasePriceId])
  @@index([processedBy])
}

// PRICING-RELATED MODELS
model ProductSalePrice {
  id            Int      @id @default(autoincrement())
  productId     Int
  unitId        Int
  price         Decimal  @db.Decimal(18, 2)
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  unit    Unit    @relation(fields: [unitId], references: [id])

  saleInvoiceItem SaleInvoiceItem[]
  SaleReturn      SaleReturn[]

  @@unique([productId, unitId, effectiveDate])
}

model ProductPurchasePrice {
  id            Int      @id @default(autoincrement())
  productId     Int
  unitId        Int
  price         Decimal  @db.Decimal(18, 2)
  effectiveDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  unit    Unit    @relation(fields: [unitId], references: [id])

  missingProducts      MissingProduct[]
  purchaseInvoiceItems PurchaseInvoiceItem[]
  purchaseReturns      PurchaseReturn[]

  @@unique([productId, unitId, effectiveDate])
}

// INVOICE-RELATED MODELS
model SaleInvoice {
  id          Int  @id @default(autoincrement())
  processedBy Int
  customerId  Int?

  totalAmount Decimal       @default(0.00) @db.Decimal(18, 2)
  paidSoFar   Decimal       @default(0.00) @db.Decimal(18, 2)
  status      InvoiceStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user     User      @relation(fields: [processedBy], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])

  saleInvoiceItems SaleInvoiceItem[]
  salePayments     SalePayment[]

  @@index([processedBy])
  @@index([status])
}

model SaleInvoiceItem {
  id                 Int      @id @default(autoincrement())
  productSalePriceId Int
  saleInvoiceId      Int
  quantity           Decimal  @db.Decimal(18, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  productSalePrice ProductSalePrice @relation(fields: [productSalePriceId], references: [id])
  saleInvoice      SaleInvoice      @relation(fields: [saleInvoiceId], references: [id])

  @@index([productSalePriceId])
  @@index([saleInvoiceId])
}

model PurchaseInvoice {
  id          Int           @id @default(autoincrement())
  processedBy Int
  supplierId  Int
  totalAmount Decimal       @default(0.00) @db.Decimal(18, 2)
  paidSoFar   Decimal       @default(0.00) @db.Decimal(18, 2)
  status      InvoiceStatus @default(OPEN)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user     User     @relation(fields: [processedBy], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  purchaseInvoiceItems PurchaseInvoiceItem[]
  purchasePayments     PurchasePayment[]
  purchaseReturns      PurchaseReturn[]

  @@index([processedBy])
  @@index([supplierId])
  @@index([status])
}

model PurchaseInvoiceItem {
  id                     Int      @id @default(autoincrement())
  productPurchasePriceId Int
  purchaseInvoiceId      Int
  quantity               Decimal  @db.Decimal(18, 2)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  productPurchasePrice ProductPurchasePrice @relation(fields: [productPurchasePriceId], references: [id])
  purchaseInvoice      PurchaseInvoice      @relation(fields: [purchaseInvoiceId], references: [id])

  @@index([productPurchasePriceId])
  @@index([purchaseInvoiceId])
}

// PAYMENT-RELATED MODELS
model PurchasePayment {
  id                Int      @id @default(autoincrement())
  purchaseInvoiceId Int
  amount            Int
  processedBy       Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  purchaseInvoice PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id])
  user            User            @relation(fields: [processedBy], references: [id])

  @@index([purchaseInvoiceId])
  @@index([processedBy])
}

model SalePayment {
  id            Int      @id @default(autoincrement())
  saleInvoiceId Int
  amount        Int
  processedBy   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  saleInvoice SaleInvoice @relation(fields: [saleInvoiceId], references: [id])
  user        User        @relation(fields: [processedBy], references: [id])

  @@index([saleInvoiceId])
  @@index([processedBy])
}

// RETURN-RELATED MODELS
model SaleReturn {
  id                 Int      @id @default(autoincrement())
  reason             String?
  quantity           Decimal  @db.Decimal(18, 2)
  productSalePriceId Int
  processedBy        Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  productSalePrice ProductSalePrice @relation(fields: [productSalePriceId], references: [id])
  user             User             @relation(fields: [processedBy], references: [id])

  @@index([productSalePriceId])
  @@index([processedBy])
}

model PurchaseReturn {
  id                     Int                  @id @default(autoincrement())
  quantity               Decimal              @db.Decimal(18, 2)
  status                 PurchaseReturnStatus @default(pending)
  reason                 PurchaseReturnReason @default(other)
  totalAmount            Decimal              @default(0.00) @db.Decimal(18, 2)
  refundAmount           Decimal              @default(0.00) @db.Decimal(18, 2)
  supplierId             Int
  productPurchasePriceId Int
  returnedBy             Int
  moneyTakenBy           Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  supplier             Supplier             @relation(fields: [supplierId], references: [id])
  productPurchasePrice ProductPurchasePrice @relation(fields: [productPurchasePriceId], references: [id])

  returnedByUser    User             @relation("PurchaseReturn_returnedBy", fields: [returnedBy], references: [id])
  moneyTakenByUser  User?            @relation("PurchaseReturn_moneyTakenBy", fields: [moneyTakenBy], references: [id])
  PurchaseInvoice   PurchaseInvoice? @relation(fields: [purchaseInvoiceId], references: [id])
  purchaseInvoiceId Int?

  @@index([supplierId])
  @@index([productPurchasePriceId])
  @@index([returnedBy])
  @@index([moneyTakenBy])
  @@index([status])
}

// OTHER MODELS
model Supplier {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  contactInfo String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  purchaseInvoices PurchaseInvoice[]
  purchaseReturns  PurchaseReturn[]

  @@index([name])
}

model Expense {
  id        Int      @id @default(autoincrement())
  amount    Decimal  @db.Decimal(18, 2)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  id        Int      @id @default(autoincrement())
  amount    Decimal  @db.Decimal(18, 2)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SaleInvoice SaleInvoice[]

  @@index([firstName, lastName])
}
