datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Owner
  Manager
  Cashier
  Worker
}

enum PaymentType {
  Salaried
  Hourly
}

enum PurchaseDebtStatus {
  unpaid
  partially_paid
  paid
}

enum SalesDebtStatus {
  unpaid
  partially_paid
  paid
}

enum PurchaseReturnStatus {
  pending
  approved
  completed
  rejected
}

model User {
  id          Int    @id @default(autoincrement())
  name        String
  password    String
  email       String @unique
  phoneNumber String
  role        Role

  employee                Employee?
  salesInvoices           SalesInvoice[]
  purchaseInvoices        PurchaseInvoice[]
  purchaseInvoicePayments PurchaseInvoicePayment[]
  purchaseDebts           PurchaseDebt[]
  salesInvoicePayments    SalesInvoicePayment[]
  salesDebts              SalesDebt[]
  missingProducts         MissingProduct[]
  customerReturnPayments  CustomerReturnPayment[]
  purchaseReturns         PurchaseReturn[]
  purchaseReturnPayments  PurchaseReturnPayment[]
}

model Employee {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  paymentType PaymentType
  hourlyPay   Decimal?    @db.Decimal(18, 2)
  monthlyPay  Decimal?    @db.Decimal(18, 2)
  dateOfHire  DateTime

  user       User                @relation(fields: [userId], references: [id])
  timeShifts EmployeeTimeShift[]
  expenses   EmployeeExpense[]
}

model EmployeeTimeShift {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  workDate      DateTime
  startWorkTime DateTime
  endWorkTime   DateTime

  employee Employee @relation(fields: [employeeId], references: [id])

  // @@unique([employeeId, workDate])
  @@index([employeeId])
  @@index([workDate])
}

model EmployeeExpense {
  id           Int         @id @default(autoincrement())
  employeeId   Int
  paymentType  PaymentType
  paymentMonth DateTime
  totalHours   Decimal?    @db.Decimal(18, 2)
  hourlyPaid   Decimal?    @db.Decimal(18, 2)
  totalPaid    Decimal     @db.Decimal(18, 2)

  employee Employee @relation(fields: [employeeId], references: [id])

  // @@unique([employeeId, paymentMonth])
  // @@index([employeeId, paymentMonth])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Unit {
  id         Int    @id @default(autoincrement())
  unitName   String
  unitSymbol String @unique

  baseProducts         Product[]              @relation("BaseUnit")
  productUnits         ProductUnit[]
  unitConversionsFrom  UnitConversion[]       @relation("FromUnit")
  unitConversionsTo    UnitConversion[]       @relation("ToUnit")
  ProductSellingPrice  ProductSellingPrice[]
  ProductPurchasePrice ProductPurchasePrice[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  categoryId  Int
  baseUnitId  Int
  description String?

  category              Category               @relation(fields: [categoryId], references: [id])
  baseUnit              Unit                   @relation("BaseUnit", fields: [baseUnitId], references: [id])
  productUnits          ProductUnit[]
  productSellingPrices  ProductSellingPrice[]
  productPurchasePrices ProductPurchasePrice[]
  inventory             Inventory[]
  salesInvoiceItems     SalesInvoiceItem[]
  purchaseInvoiceItems  PurchaseInvoiceItem[]
  missingProducts       MissingProduct[]
  customerReturns       CustomerReturn[]
  purchaseReturns       PurchaseReturn[]

  @@index([categoryId])
  @@index([baseUnitId])
}

model ProductUnit {
  productId Int
  unitId    Int

  product Product @relation(fields: [productId], references: [id])
  unit    Unit    @relation(fields: [unitId], references: [id])

  @@id([productId, unitId])
  @@index([unitId])
}

model UnitConversion {
  id             Int     @id @default(autoincrement())
  fromUnitId     Int
  toUnitId       Int
  conversionRate Decimal @db.Decimal(18, 6)

  fromUnit Unit @relation("FromUnit", fields: [fromUnitId], references: [id])
  toUnit   Unit @relation("ToUnit", fields: [toUnitId], references: [id])

  @@unique([fromUnitId, toUnitId])
}

model Inventory {
  id        Int     @id @default(autoincrement())
  productId Int
  quantity  Decimal @db.Decimal(18, 2)

  product Product @relation(fields: [productId], references: [id])
}

model SalesInvoice {
  id          Int      @id @default(autoincrement())
  workerId    Int
  date        DateTime @default(now())
  totalAmount Decimal  @db.Decimal(18, 2)

  worker   User                  @relation(fields: [workerId], references: [id])
  items    SalesInvoiceItem[]
  payments SalesInvoicePayment[]
  debts    SalesDebt[]

  @@index([workerId])
  @@index([date])
}

model SalesInvoiceItem {
  id                    Int     @id @default(autoincrement())
  productSellingPriceId Int
  salesInvoiceId        Int
  quantity              Decimal @db.Decimal(18, 2)

  productSellingPrice ProductSellingPrice @relation(fields: [productSellingPriceId], references: [id])
  salesInvoice        SalesInvoice        @relation(fields: [salesInvoiceId], references: [id])
  Product             Product?            @relation(fields: [productId], references: [id])
  productId           Int?

  @@index([salesInvoiceId])
  @@index([productSellingPriceId])
}

model ProductSellingPrice {
  id            Int      @id @default(autoincrement())
  productId     Int
  unitId        Int
  sellingPrice  Decimal  @db.Decimal(18, 2)
  effectiveDate DateTime

  product           Product            @relation(fields: [productId], references: [id])
  unit              Unit               @relation(fields: [unitId], references: [id])
  salesInvoiceItems SalesInvoiceItem[]
  missingProducts   MissingProduct[]
  customerReturns   CustomerReturn[]

  @@unique([productId, unitId, effectiveDate])
  @@index([productId])
  @@index([unitId])
}

model ProductPurchasePrice {
  id            Int      @id @default(autoincrement())
  productId     Int
  unitId        Int
  purchasePrice Decimal  @db.Decimal(18, 2)
  effectiveDate DateTime

  product              Product               @relation(fields: [productId], references: [id])
  unit                 Unit                  @relation(fields: [unitId], references: [id])
  purchaseInvoiceItems PurchaseInvoiceItem[]
  purchaseReturns      PurchaseReturn[]

  @@unique([productId, unitId, effectiveDate])
  @@index([productId])
  @@index([unitId])
}

model PurchaseInvoice {
  id         Int      @id @default(autoincrement())
  workerId   Int
  supplierId Int
  date       DateTime @default(now())

  worker          User                     @relation(fields: [workerId], references: [id])
  supplier        Supplier                 @relation(fields: [supplierId], references: [id])
  items           PurchaseInvoiceItem[]
  payments        PurchaseInvoicePayment[]
  debts           PurchaseDebt[]
  purchaseReturns PurchaseReturn[]

  @@index([workerId])
  @@index([supplierId])
  @@index([date])
}

model PurchaseInvoiceItem {
  id                     Int     @id @default(autoincrement())
  productPurchasePriceId Int
  purchaseInvoiceId      Int
  quantity               Decimal @db.Decimal(18, 2)

  productPurchasePrice ProductPurchasePrice @relation(fields: [productPurchasePriceId], references: [id])
  purchaseInvoice      PurchaseInvoice      @relation(fields: [purchaseInvoiceId], references: [id])
  Product              Product?             @relation(fields: [productId], references: [id])
  productId            Int?

  @@index([purchaseInvoiceId])
  @@index([productPurchasePriceId])
}

model Supplier {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  contactInfo String?

  purchaseInvoices        PurchaseInvoice[]
  purchaseReturns         PurchaseReturn[]
  purchaseInvoicePayments PurchaseInvoicePayment[]
  PurchaseDebt            PurchaseDebt[]

  @@index([name])
}

model Expense {
  id     Int      @id @default(autoincrement())
  amount Decimal  @db.Decimal(18, 2)
  note   String?
  date   DateTime
}

model Income {
  id     Int      @id @default(autoincrement())
  amount Decimal  @db.Decimal(18, 2)
  note   String?
  date   DateTime
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())

  salesInvoicePayments SalesInvoicePayment[]
  salesDebts           SalesDebt[]
  customerReturns      CustomerReturn[]

  @@index([firstName, lastName])
}

model PurchaseInvoicePayment {
  id                Int      @id @default(autoincrement())
  paymentDate       DateTime
  totalAmount       Decimal  @db.Decimal(18, 2)
  paidAmount        Decimal  @db.Decimal(18, 2)
  purchaseInvoiceId Int
  processedBy       Int
  supplierId        Int

  purchaseInvoice      PurchaseInvoice       @relation(fields: [purchaseInvoiceId], references: [id])
  processedByUser      User                  @relation(fields: [processedBy], references: [id])
  supplier             Supplier              @relation(fields: [supplierId], references: [id])
  purchaseDebtPayments PurchaseDebtPayment[]

  @@index([purchaseInvoiceId])
  @@index([paymentDate])
  @@index([processedBy])
}

model PurchaseDebt {
  id                Int                @id @default(autoincrement())
  debtDate          DateTime
  status            PurchaseDebtStatus @default(unpaid)
  originalAmount    Decimal            @db.Decimal(18, 2)
  remainingAmount   Decimal            @db.Decimal(18, 2)
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
  processedBy       Int
  purchaseInvoiceId Int
  supplierId        Int

  processedByUser      User                  @relation(fields: [processedBy], references: [id])
  purchaseInvoice      PurchaseInvoice       @relation(fields: [purchaseInvoiceId], references: [id])
  supplier             Supplier              @relation(fields: [supplierId], references: [id])
  purchaseDebtPayments PurchaseDebtPayment[]

  @@index([purchaseInvoiceId])
  @@index([status])
  @@index([processedBy])
  @@index([supplierId])
}

model PurchaseDebtPayment {
  id                       Int      @id @default(autoincrement())
  debtId                   Int
  purchaseInvoicePaymentId Int
  amount                   Decimal  @db.Decimal(18, 2)
  paymentDate              DateTime @default(now())

  debt                   PurchaseDebt           @relation(fields: [debtId], references: [id])
  purchaseInvoicePayment PurchaseInvoicePayment @relation(fields: [purchaseInvoicePaymentId], references: [id])

  @@index([debtId])
  @@index([purchaseInvoicePaymentId])
}

model SalesInvoicePayment {
  id             Int      @id @default(autoincrement())
  paymentDate    DateTime
  totalAmount    Decimal  @db.Decimal(18, 2)
  paidAmount     Decimal  @db.Decimal(18, 2)
  salesInvoiceId Int
  processedBy    Int
  customerId     Int

  salesInvoice      SalesInvoice       @relation(fields: [salesInvoiceId], references: [id])
  processedByUser   User               @relation(fields: [processedBy], references: [id])
  customer          Customer           @relation(fields: [customerId], references: [id])
  salesDebtPayments SalesDebtPayment[]

  @@index([salesInvoiceId])
  @@index([paymentDate])
  @@index([processedBy])
}

model SalesDebt {
  id              Int             @id @default(autoincrement())
  debtDate        DateTime
  status          SalesDebtStatus @default(unpaid)
  originalAmount  Decimal         @db.Decimal(18, 2)
  remainingAmount Decimal         @db.Decimal(18, 2)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?
  processedBy     Int
  salesInvoiceId  Int
  customerId      Int

  processedByUser   User               @relation(fields: [processedBy], references: [id])
  salesInvoice      SalesInvoice       @relation(fields: [salesInvoiceId], references: [id])
  customer          Customer           @relation(fields: [customerId], references: [id])
  salesDebtPayments SalesDebtPayment[]

  @@index([salesInvoiceId])
  @@index([status])
  @@index([processedBy])
  @@index([customerId])
}

model SalesDebtPayment {
  id                    Int      @id @default(autoincrement())
  debtId                Int
  salesInvoicePaymentId Int
  amount                Decimal  @db.Decimal(18, 2)
  paymentDate           DateTime @default(now())

  debt                SalesDebt           @relation(fields: [debtId], references: [id])
  salesInvoicePayment SalesInvoicePayment @relation(fields: [salesInvoicePaymentId], references: [id])

  @@index([debtId])
  @@index([salesInvoicePaymentId])
}

model MissingProduct {
  id                    Int     @id @default(autoincrement())
  productSellingPriceId Int
  quantity              Decimal @db.Decimal(18, 2)
  processedBy           Int?
  notes                 String?

  productSellingPrice ProductSellingPrice @relation(fields: [productSellingPriceId], references: [id])
  processedByUser     User?               @relation(fields: [processedBy], references: [id])
  Product             Product?            @relation(fields: [productId], references: [id])
  productId           Int?

  @@index([processedBy])
  @@index([productSellingPriceId])
}

model CustomerReturn {
  id                    Int      @id @default(autoincrement())
  returnDate            DateTime @default(now())
  reason                String?
  quantity              Decimal  @db.Decimal(18, 2)
  productSellingPriceId Int

  productSellingPrice    ProductSellingPrice     @relation(fields: [productSellingPriceId], references: [id])
  customerReturnPayments CustomerReturnPayment[]
  Product                Product?                @relation(fields: [productId], references: [id])
  productId              Int?
  Customer               Customer?               @relation(fields: [customerId], references: [id])
  customerId             Int?

  @@index([productSellingPriceId])
}

model CustomerReturnPayment {
  id               Int      @id @default(autoincrement())
  customerReturnId Int
  refundPrice      Decimal  @db.Decimal(18, 2)
  refundAmount     Decimal  @db.Decimal(18, 2)
  refundDate       DateTime @default(now())
  processedBy      Int?
  notes            String?

  customerReturn  CustomerReturn @relation(fields: [customerReturnId], references: [id])
  processedByUser User?          @relation(fields: [processedBy], references: [id])

  @@index([customerReturnId])
  @@index([processedBy])
  @@index([refundDate])
}

model PurchaseReturn {
  id                     Int                  @id @default(autoincrement())
  returnDate             DateTime             @default(now())
  supplierId             Int
  processedBy            Int
  status                 PurchaseReturnStatus @default(pending)
  totalAmount            Decimal              @default(0.00) @db.Decimal(18, 2)
  refundAmount           Decimal              @default(0.00) @db.Decimal(18, 2)
  notes                  String?
  productPurchasePriceId Int
  reason                 String?
  quantity               Decimal              @db.Decimal(18, 2)

  supplier               Supplier                @relation(fields: [supplierId], references: [id])
  processedByUser        User                    @relation(fields: [processedBy], references: [id])
  productPurchasePrice   ProductPurchasePrice    @relation(fields: [productPurchasePriceId], references: [id])
  purchaseReturnPayments PurchaseReturnPayment[]
  Product                Product?                @relation(fields: [productId], references: [id])
  productId              Int?
  PurchaseInvoice        PurchaseInvoice?        @relation(fields: [purchaseInvoiceId], references: [id])
  purchaseInvoiceId      Int?

  @@index([supplierId])
  @@index([processedBy])
  @@index([status])
  @@index([returnDate])
}

model PurchaseReturnPayment {
  id               Int      @id @default(autoincrement())
  purchaseReturnId Int
  paymentDate      DateTime @default(now())
  amount           Decimal  @db.Decimal(18, 2)
  reference        String?
  notes            String?

  purchaseReturn PurchaseReturn @relation(fields: [purchaseReturnId], references: [id])
  User           User?          @relation(fields: [userId], references: [id])
  userId         Int?

  @@index([purchaseReturnId])
  @@index([paymentDate])
}
